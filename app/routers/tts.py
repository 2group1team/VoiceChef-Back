from fastapi import APIRouter, Depends, HTTPException, status, BackgroundTasks
from sqlalchemy.orm import Session
from starlette.responses import FileResponse

from app.database.session import get_db
from app.dependencies.auth import get_current_user
from app.models.user import User
from app.models.dish import Recipe, Dish, RecipeStep
from app.utils.tts import generate_tts_for_step, get_tts_cache_path, delete_tts_cache_for_recipe
import logging
import os

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/recipes", tags=["üîä –û–∑–≤—É—á–∫–∞"])


@router.get("/{recipe_id}/tts/step/{step_number}",
            summary="–ü–æ–ª—É—á–∏—Ç—å MP3 —Ñ–∞–π–ª —à–∞–≥–∞",
            description="–í–æ–∑–≤—Ä–∞—Ç MP3 —Ñ–∞–π–ª–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —à–∞–≥–∞ —Ä–µ—Ü–µ–ø—Ç–∞")
async def get_step_audio(
        recipe_id: int,
        step_number: int,
        db: Session = Depends(get_db),
        user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ MP3 —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–≥–∞ —Ä–µ—Ü–µ–ø—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ—Ü–µ–ø—Ç—É
        recipe = db.query(Recipe).join(Recipe.dish).filter(
            Recipe.id == recipe_id,
            Dish.user_id == int(user.id)
        ).first()

        if not recipe:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–≥ –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
        step = db.query(RecipeStep).filter(
            RecipeStep.recipe_id == recipe_id
        ).order_by(RecipeStep.id).offset(step_number - 1).first()

        if not step:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"–®–∞–≥ {step_number} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        voice_id = f"recipe_{recipe_id}_step_{step_number}"
        cache_path = get_tts_cache_path(step.description, voice_id)

        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
        if not cache_path.exists():
            logger.info(f"Generating TTS for recipe {recipe_id}, step {step_number}")
            cache_path = await generate_tts_for_step(step.description, voice_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
        if not cache_path.exists():
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"
            )

        logger.info(f"Serving TTS file: {cache_path}")

        return FileResponse(
            path=str(cache_path),
            media_type="audio/mpeg",
            filename=f"recipe_{recipe_id}_step_{step_number}.mp3",
            headers={
                "Cache-Control": "public, max-age=3600",  # –ö–µ—à –Ω–∞ 1 —á–∞—Å
                "Accept-Ranges": "bytes"  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            }
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error serving TTS file: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"
        )


@router.post("/{recipe_id}/tts/generate",
             summary="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TTS –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤",
             description="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ —Ä–µ—Ü–µ–ø—Ç–∞")
async def generate_recipe_tts(
        recipe_id: int,
        background_tasks: BackgroundTasks,
        db: Session = Depends(get_db),
        user: User = Depends(get_current_user)
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ —Ä–µ—Ü–µ–ø—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ—Ü–µ–ø—Ç—É
        recipe = db.query(Recipe).join(Recipe.dish).filter(
            Recipe.id == recipe_id,
            Dish.user_id == int(user.id)
        ).first()

        if not recipe:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–≥–∏ —Ä–µ—Ü–µ–ø—Ç–∞
        steps = db.query(RecipeStep).filter(
            RecipeStep.recipe_id == recipe_id
        ).order_by(RecipeStep.id).all()

        if not steps:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–£ —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–µ—Ç —à–∞–≥–æ–≤"
            )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
        generated_count = 0
        for i, step in enumerate(steps, 1):
            voice_id = f"recipe_{recipe_id}_step_{i}"
            cache_path = get_tts_cache_path(step.description, voice_id)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not cache_path.exists():
                background_tasks.add_task(
                    generate_tts_for_step,
                    step.description,
                    voice_id
                )
                generated_count += 1

        return {
            "message": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –∑–∞–ø—É—â–µ–Ω–∞",
            "recipe_id": recipe_id,
            "total_steps": len(steps),
            "generating_steps": generated_count,
            "cached_steps": len(steps) - generated_count
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error initiating TTS generation: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS"
        )


@router.get("/{recipe_id}/tts/status",
            summary="–°—Ç–∞—Ç—É—Å TTS —Ñ–∞–π–ª–æ–≤",
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ TTS —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞")
async def get_tts_status(
        recipe_id: int,
        db: Session = Depends(get_db),
        user: User = Depends(get_current_user)
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ TTS —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ—Ü–µ–ø—Ç—É
        recipe = db.query(Recipe).join(Recipe.dish).filter(
            Recipe.id == recipe_id,
            Dish.user_id == int(user.id)
        ).first()

        if not recipe:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–≥–∏
        steps = db.query(RecipeStep).filter(
            RecipeStep.recipe_id == recipe_id
        ).order_by(RecipeStep.id).all()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
        steps_status = []
        ready_count = 0

        for i, step in enumerate(steps, 1):
            voice_id = f"recipe_{recipe_id}_step_{i}"
            cache_path = get_tts_cache_path(step.description, voice_id)
            is_ready = cache_path.exists()

            if is_ready:
                ready_count += 1
                file_size = cache_path.stat().st_size if cache_path.exists() else 0
            else:
                file_size = 0

            steps_status.append({
                "step_number": i,
                "description": step.description[:50] + "..." if len(step.description) > 50 else step.description,
                "is_ready": is_ready,
                "file_size": file_size,
                "url": f"/recipes/{recipe_id}/tts/step/{i}" if is_ready else None
            })

        return {
            "recipe_id": recipe_id,
            "total_steps": len(steps),
            "ready_steps": ready_count,
            "completion_percentage": round((ready_count / len(steps)) * 100, 1) if steps else 0,
            "steps": steps_status
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error checking TTS status: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ TTS"
        )


@router.delete("/{recipe_id}/tts",
               summary="–£–¥–∞–ª–∏—Ç—å –æ–∑–≤—É—á–∫—É",
               description="–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –æ–∑–≤—É—á–∫–∏ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞")
async def delete_recipe_tts(
        recipe_id: int,
        db: Session = Depends(get_db),
        user: User = Depends(get_current_user)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö TTS —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞"""
    try:
        recipe = db.query(Recipe).join(Recipe.dish).filter(
            Recipe.id == recipe_id,
            Dish.user_id == int(user.id)
        ).first()
        if not recipe:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        deleted_count = delete_tts_cache_for_recipe(recipe_id)
        return {
            "message": "–û–∑–≤—É—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
            "recipe_id": recipe_id,
            "deleted_files": deleted_count
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error deleting TTS: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–∑–≤—É—á–∫–∏"
        )