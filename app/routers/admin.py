
from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session
from sqlalchemy import func, desc
from typing import Optional
from datetime import datetime, timedelta
from app.database.session import get_db
from app.dependencies.auth import get_current_admin_user
from app.models.user import User
from app.models.dish import Dish, Recipe
from app.models.ingredient import Ingredient
from app.schemas.admin import (
    AdminDashboard, SystemStats,
    UserBulkAction, ContentModeration, SystemSettings
)
from app.schemas.user import UserAdminRead, PaginatedResponse
import logging

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/admin", tags=["üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"])

@router.get("/dashboard",
            response_model=AdminDashboard,
            summary="–ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥",
            description="–û–±—â–∏–π –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
async def get_admin_dashboard(
        db: Session = Depends(get_db),
        admin: User = Depends(get_current_admin_user)
):
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = db.query(User).count()
        active_users = db.query(User).filter(User.is_active == True).count()
        premium_users = db.query(User).filter(User.is_premium == True).count()
        new_users_today = db.query(User).filter(
            User.created_at >= datetime.utcnow().date()
        ).count()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        total_dishes = db.query(Dish).count()
        total_recipes = db.query(Recipe).count()
        total_ingredients = db.query(Ingredient).count()

        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = datetime.utcnow() - timedelta(days=7)
        recent_dishes = db.query(Dish).filter(Dish.created_at >= week_ago).count()
        recent_recipes = db.query(Recipe).filter(Recipe.created_at >= week_ago).count()

        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥
        top_categories = db.query(
            Dish.category,
            func.count(Dish.id).label('count')
        ).group_by(Dish.category).order_by(desc('count')).limit(5).all()

        # –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        top_users = db.query(
            User.id, User.email, User.first_name, User.last_name,
            func.count(Dish.id).label('dishes_count')
        ).join(Dish).group_by(User.id).order_by(desc('dishes_count')).limit(5).all()

        return AdminDashboard(
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            total_users=total_users,
            active_users=active_users,
            premium_users=premium_users,
            new_users_today=new_users_today,
            conversion_rate=round((premium_users / total_users) * 100, 2) if total_users > 0 else 0,

            # –ö–æ–Ω—Ç–µ–Ω—Ç
            total_dishes=total_dishes,
            total_recipes=total_recipes,
            total_ingredients=total_ingredients,
            recent_dishes=recent_dishes,
            recent_recipes=recent_recipes,

            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            top_categories=[{"category": cat, "count": count} for cat, count in top_categories],
            top_users=[{
                "id": user_id, "email": email, "name": f"{first_name or ''} {last_name or ''}".strip(),
                "dishes_count": dishes_count
            } for user_id, email, first_name, last_name, dishes_count in top_users]
        )

    except Exception as e:
        logger.error(f"Error getting admin dashboard: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞"
        )


@router.get("/system/stats",
            response_model=SystemStats,
            summary="–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            description="–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
async def get_system_stats(
        period: str = Query("7d", pattern="^(1d|7d|30d|90d)$", description="–ü–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"),
        db: Session = Depends(get_db),
        admin: User = Depends(get_current_admin_user)
):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        period_map = {"1d": 1, "7d": 7, "30d": 30, "90d": 90}
        days = period_map[period]
        start_date = datetime.utcnow() - timedelta(days=days)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ –¥–Ω—è–º
        registrations = db.query(
            func.date(User.created_at).label('date'),
            func.count(User.id).label('count')
        ).filter(User.created_at >= start_date).group_by(
            func.date(User.created_at)
        ).order_by('date').all()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        dishes_created = db.query(
            func.date(Dish.created_at).label('date'),
            func.count(Dish.id).label('count')
        ).filter(Dish.created_at >= start_date).group_by(
            func.date(Dish.created_at)
        ).order_by('date').all()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º —Ñ–∞–π–ª–æ–≤
        storage_usage = {
            "photos_count": db.query(Recipe).filter(Recipe.photo_url.isnot(None)).count(),
            "estimated_storage_mb": 0,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç
            "tts_cache_files": 0  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç TTS —Ñ–∞–π–ª–æ–≤
        }

        return SystemStats(
            period=period,
            registrations_chart=[{"date": str(date), "count": count} for date, count in registrations],
            content_creation_chart=[{"date": str(date), "count": count} for date, count in dishes_created],
            storage_usage=storage_usage
        )

    except Exception as e:
        logger.error(f"Error getting system stats: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )

@router.get("/users",
            response_model=PaginatedResponse[UserAdminRead],
            summary="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
            description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
async def get_users_admin(
        page: int = Query(1, ge=1),
        size: int = Query(20, ge=1, le=100),
        search: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫ –ø–æ email/–∏–º–µ–Ω–∏"),
        is_premium: Optional[bool] = Query(None),
        is_active: Optional[bool] = Query(None),
        is_admin: Optional[bool] = Query(None),
        created_after: Optional[datetime] = Query(None),
        created_before: Optional[datetime] = Query(None),
        sort_by: str = Query("created_at", regex="^(created_at|email|last_login)$"),
        sort_order: str = Query("desc", regex="^(asc|desc)$"),
        db: Session = Depends(get_db),
        admin: User = Depends(get_current_admin_user)
):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
    try:
        query = db.query(User)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if search:
            search_term = f"%{search.lower()}%"
            query = query.filter(
                (User.email.ilike(search_term)) |
                (User.first_name.ilike(search_term)) |
                (User.last_name.ilike(search_term))
            )

        if is_premium is not None:
            query = query.filter(User.is_premium == is_premium)
        if is_active is not None:
            query = query.filter(User.is_active == is_active)
        if is_admin is not None:
            query = query.filter(User.is_admin == is_admin)
        if created_after:
            query = query.filter(User.created_at >= created_after)
        if created_before:
            query = query.filter(User.created_at <= created_before)

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort_column = getattr(User, sort_by)
        if sort_order == "desc":
            query = query.order_by(desc(sort_column))
        else:
            query = query.order_by(sort_column)

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total = query.count()
        offset = (page - 1) * size
        users = query.offset(offset).limit(size).all()

        users_admin_data = []
        for user in users:
            user_admin = {
                "id": user.id,
                "email": user.email,
                "full_name": user.full_name,
                "is_active": user.is_active,
                "is_premium": user.is_premium,
                "is_admin": user.is_admin,
                "is_verified": user.is_verified,
                "created_at": user.created_at,
                "last_login": user.last_login,
                "permissions": user.permissions_list,
                "language": user.language,
                "timezone": user.timezone
            }
            users_admin_data.append(user_admin)

        pages = (total + size - 1) // size

        return PaginatedResponse(
            items=users_admin_data,
            total=total,
            page=page,
            size=size,
            pages=pages,
            has_next=page < pages,
            has_prev=page > 1
        )

    except Exception as e:
        logger.error(f"Error getting users for admin: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )


@router.post("/users/bulk-action",
             summary="–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
             description="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫ –≥—Ä—É–ø–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def bulk_user_action(
        action_data: UserBulkAction,
        db: Session = Depends(get_db),
        admin: User = Depends(get_current_admin_user)
):
    """–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        users = db.query(User).filter(User.id.in_(action_data.user_ids)).all()

        if len(users) != len(action_data.user_ids):
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            )

        updated_count = 0
        for user in users:
            # –ù–µ–ª—å–∑—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
            if action_data.action in ["deactivate"] and user.id == admin.id:
                continue

            if action_data.action == "activate":
                user.is_active = True
                updated_count += 1
            elif action_data.action == "deactivate":
                user.is_active = False
                updated_count += 1
            elif action_data.action == "premium_on":
                user.is_premium = True
                updated_count += 1
            elif action_data.action == "premium_off":
                user.is_premium = False
                updated_count += 1

        db.commit()

        logger.info(f"Admin {admin.email} performed bulk action {action_data.action} on {updated_count} users")

        return {
            "success": True,
            "message": f"–î–µ–π—Å—Ç–≤–∏–µ {action_data.action} –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "updated_count": updated_count
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error in bulk user action: {e}")
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∞—Å—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"
        )

@router.get("/content/moderation",
            response_model=ContentModeration,
            summary="–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            description="–ö–æ–Ω—Ç–µ–Ω—Ç —Ç—Ä–µ–±—É—é—â–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏")
async def get_content_moderation(
        db: Session = Depends(get_db),
        admin: User = Depends(get_current_admin_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        # –ù–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
        yesterday = datetime.utcnow() - timedelta(days=1)
        recent_dishes = db.query(Dish).filter(
            Dish.created_at >= yesterday
        ).order_by(desc(Dish.created_at)).limit(20).all()

        # –†–µ—Ü–µ–ø—Ç—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
        recipes_with_photos = db.query(Recipe).filter(
            Recipe.photo_url.isnot(None)
        ).order_by(desc(Recipe.created_at)).limit(20).all()

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–ª—é–¥ (–≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ø–∞–º–µ—Ä—ã)
        power_users = db.query(
            User.id, User.email, User.first_name, User.last_name,
            func.count(Dish.id).label('dishes_count')
        ).join(Dish).group_by(User.id).having(
            func.count(Dish.id) > 10
        ).order_by(desc('dishes_count')).limit(10).all()

        # –ù–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é)
        week_ago = datetime.utcnow() - timedelta(days=7)
        new_ingredients = db.query(Ingredient).filter(
            Ingredient.created_at >= week_ago
        ).order_by(desc(Ingredient.created_at)).limit(20).all()

        return ContentModeration(
            recent_dishes=[{
                "id": dish.id,
                "name": dish.name,
                "category": dish.category,
                "user_email": dish.user.email,
                "created_at": dish.created_at
            } for dish in recent_dishes],

            recipes_with_photos=[{
                "id": recipe.id,
                "dish_name": recipe.dish.name,
                "photo_url": recipe.photo_url,
                "user_email": recipe.dish.user.email,
                "created_at": recipe.created_at
            } for recipe in recipes_with_photos],

            power_users=[{
                "id": user_id,
                "email": email,
                "name": f"{first_name or ''} {last_name or ''}".strip(),
                "dishes_count": dishes_count
            } for user_id, email, first_name, last_name, dishes_count in power_users],

            new_ingredients=[{
                "id": ing.id,
                "name": ing.name,
                "type": ing.type,
                "created_at": ing.created_at
            } for ing in new_ingredients]
        )

    except Exception as e:
        logger.error(f"Error getting content moderation: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        )

@router.get("/system/settings",
            response_model=SystemSettings,
            summary="–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            description="–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
async def get_system_settings(
        admin: User = Depends(get_current_admin_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    from app.config.config import settings
    from app.utils.limits import get_user_limits

    return SystemSettings(
        # –õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        free_user_limits=get_user_limits(False),
        premium_user_limits=get_user_limits(True),

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        jwt_expire_minutes=settings.JWT_ACCESS_TOKEN_EXPIRE_MINUTES,
        hash_rounds=settings.HASH_ROUNDS,
        min_password_length=settings.MIN_PASSWORD_LENGTH,

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤
        max_photo_size_free=2 * 1024 * 1024,  # 2MB
        max_photo_size_premium=10 * 1024 * 1024,  # 10MB
        allowed_photo_formats=[".jpg", ".jpeg", ".png"],

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_pool_size=settings.DB_POOL_SIZE,
        db_pool_timeout=settings.DB_POOL_TIMEOUT,

        # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        cors_origins=settings.FRONTEND_URLS,
        api_version="1.0.0"
    )


@router.delete("/content/cleanup",
               summary="–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
               description="–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö")
async def cleanup_system(
        cleanup_photos: bool = Query(True, description="–£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–æ—Ç–æ"),
        cleanup_tts: bool = Query(True, description="–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à TTS"),
        cleanup_logs: bool = Query(False, description="–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏"),
        db: Session = Depends(get_db),
        admin: User = Depends(get_current_admin_user)
):
    """–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        cleanup_results = {
            "photos_deleted": 0,
            "tts_files_deleted": 0,
            "logs_deleted": 0,
            "space_freed_mb": 0
        }

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏
        if cleanup_photos:
            # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–æ—Ç–æ
            cleanup_results["photos_deleted"] = 0  # –ó–∞–≥–ª—É—à–∫–∞

        if cleanup_tts:
            # –õ–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ TTS –∫—ç—à–∞
            cleanup_results["tts_files_deleted"] = 0  # –ó–∞–≥–ª—É—à–∫–∞

        if cleanup_logs:
            # –õ–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
            cleanup_results["logs_deleted"] = 0  # –ó–∞–≥–ª—É—à–∫–∞

        logger.info(f"System cleanup performed by admin {admin.email}: {cleanup_results}")

        return {
            "success": True,
            "message": "–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            "results": cleanup_results
        }

    except Exception as e:
        logger.error(f"Error during system cleanup: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–∏—Å—Ç–µ–º—ã"
        )